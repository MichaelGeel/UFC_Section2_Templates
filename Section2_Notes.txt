# Section 2: Templates

## 16) Intro to Templates:

We're going to start by porting over the app.py file from section 1, as we'll be expanding off of that work in this section.
We'll revisit the /theform route and currently, all we've been doing is returning html directly as a string.
Now this method works, but if we wanted to return a large amount of HTML, this wouldn't be very practical.
Now in flask we have what is called templates and there's a template engine called Jinja that runs these templates.
So to use these templates, we're going to first import render_template from flask.
Then we'll create a folder in our working directory called "templates", and this folder will house all our html templates
and it's also where flask knows to look for our templates.
Within this templates folder we'll create a plain HTML file called "form.html" and we'll then take the HTML from the return
statement in /theform and move it over to the HTML document.
Then instead of returning the html directly, we'll use render_template and return the form.html file.
    "render_template('form.html')"
So if we run the app now, we'll get the same result in the browser, but this is a different way of achieving said result.
If we want proof that it works, in the form.html file, above everythign else we'll add h1 tags and create a header that will reflect during runtime.
We'll also add some formatting just to make the html more valid and correct.

## 17) Template Variables:

Using templates goes much deeper than just allowing you to keep your html neatly in a separate location.
So we'll now look at how to use templates with variables inside of them.
So we'll start out by modifying the home route to return a template called "home.html" instead of the html line.
Naturally this means we need to create that file as well.
We'll also move over the return html code over to the template as well, but removing the placeholder as we can't use .format in html.
Now what we want to do is pass in a variable to the template, and to do that, you pass in extra arguments to render_template:
    "render_template('home.html', name=name)"
Now to use that variable inside the html template, we need to refer to it using "{{ }}"
    "{{ name }}"
So in Jinja the base of the code is HTML, and then whenever you want to have something dynamic (e.g. injecting some code)
you use some sort of brackets to specify that this is now code that needs to be executed.
Now in the case of what we put into the brackets, it's telling the interpreter that the variable 'name' needs to be replaced header
then it'll be readable in the HTML.
So running a test at first name will be default but if we feed it a name in the URL it'll pass that name through as it did previously.
In summary whenever you need to pass a variable to a template, you reference it in the html file with {{ }} and then in the 
route return that calls render_template, you pass the variable along there with the file name being rendered.

## 18) Conditionals:

So we've seen now that variables are one thing you can add in the template.
Another thing that can be added to templates are conditional statements, so "if" statements.
So in the home route render_template we'll pass in a boolean for the sake of demonstration.
    "render_template(..., display=True)"
Now we'll add an if statement into the home.html template, and to do that, we need to encompass the the if statement in {% %}
After that we can insert the code we'd want to run if the conditions are met, and then after that we include an {% endif %} to 
signify the end of the if statement code.
Note that the only python code in this is in the actual if statement line, not counting the endif, within the if sits html statements again.
This may be expanded upon later on however.
Now when we run the home route, because the if condition is true we'll see the h2 header we included as well in the if statement code.
We can also add an else into the statement by including an "{% else %}" line between the if and endif lines.
Note that Jinja is just placed around the html, most of the template should be HTML, and then when you need to add some logic, 
you use either the {{}} or {% %} to tell the interpreter that you are trying to add some kind of logic or variable to execute.

## 19) Loops:

INDEPENDENT NOTE: Comments in HTML are denoted by: "<!-- Text here -->"

In addition to variables and conditionals, you can also use loops in a template.
So in the /home route again for the sake of demonstration, we'll pass a list to the template as well.
    "render_template(..., my_list=['one', 'two', 'three', 'four'])"
Now in the home.html template, we'll add a for loop.
NOTE: for loops are also donated by the {% %} like if statements.
    "{% for x in my_list %}"
And the for statement will also have an endfor as well:
    "{% endfor %}"
Once again, in the for loop itself, most of the code will likely be html that incorporated the variable that's being looped over.
Remember that if you're referencing the variable in the for loop, for instance, 'x', it has to be done as a variable using the {{ }}
You can similarly do this with a dictionary as well, so we'll pass a list of dictionaries for the demo.

NOTE: When referencing a key in a dict as a var in the html file, you can do it in one of 2 ways:
    "x.name" or "x['name']"

## 20) Static Files:

A common thing that you'll have to do inside of a template is to access static files.
A static file is an image or Javascript or CSS file.
You want to be able to access these inside of the template because there's no way to get the file directly when the 
web server is running because the directory won't be exactly what you're looking for.
To do this, you'll have to use a special function called "url_for" which is very similar to the one we learnt to use in the flask app for redirecting.
To start off, we have to create a folder named "static" in our working directory.
Then within static we'll create another folder that'll house our images, which we'll save an image provided in the course to.
Then below the second for loop we'll add an image tag and scr attribute but leave that empty for now.
Inside of it, we need to put the location of the image, and to do this, we'll use the following code:
    "<img src=" url_for('static', filename='images/prettyprinted.png')"
So re-iterating we can see now that the url_for function works similarly in that we provide it a directory to look in for the file and then the file name
to look for.
As we can see it can navigate through multiple directory layers so long as we make sure to indicate exactly how to navigate to where the file is,
however, we specify the main folder to look in within the working directory and any subfolders have to be included in the filename.
Once again this applies for any form of static file which will more commonly be Javascript and CSS files.

## 21) Inheritance:

We'll lastly look at template inheritance to have a base tempalte and child templates to fill in the base template.
On pretty much any website, most pages will have a similar foundation with the only difference being the content of the page.
So instead of constantly rewriting the base of that temlpate over and over again, you can create one simple file that is the base and then all the child templates will
inherit from that base and fill in the content with the unique parts of that particular page.
To start off we'll create an html file called "base.html" which will naturally act as our base template.
Then we'll populate this base with the typical html syntax you'd see in every page.
For the sake of the demonstration we'll put something obvious to show the base of the base, just a bare-bones example.
Whatever we'll be filling into the base tempalte in the child template will be done in what we know in Jinja as "blocks".
These blocks act as place holders for the child template to fill in.
To add a block in the base template is similar to how we'd insert an if statement or for loop into a template.
In the base template, we insert the following code wherever we want a placeholder:
    "{% block title %}{% endblock %}"
    where "title" is the unique name we're assigning to a block so we can reference the block code with replace from the child tempalte.
Now in our child templates, we're going to inherit from the base template.
At the very top of the child template, we add the following to indicate the inheritance:
    "{% extends 'base.html' %}"
Now if we were to save and do a test run of the app, when we load up on of the routes that uses a child template, all we'd see is 
"Base Template" which is the only text added in the base template.
This is because in the child template we need any html code we add there to be taking the place of a block from the base template.
So in the child template, we'll pick the relevant block to encase the code in for injection into the base template and add it,
using the exact same syntax as we used to declare the block in the base template.
Remember anything that comes pre-written in the base template is not needed in the child template if they're performing the same function, 
for instance if the base has head tags already, you don't need them in the child templates.
Note that when using blocks, you can put default/placeholder content in the block declaration in the base template, but the code inside 
a block in the child template will override everything in the parent/base file block unless you use a function called "super"
To give an example, in the "content" block we created, we'll add another header tag, but if we save and reload the web page, we won't see this header 
because it's being overridden.
To display whatever is in the parent block alongside whatever is in the child block, we add the following function:
    "{{ super() }}"
And the presence of this line of code as the first line in the base template block, everything in the parent block will then show up alongside whatever you include in 
the child block as well.
So what you have in and out of block in your base template comes entirely down to how you're designing your pages.

## 22) Include:

