# Section 2: Templates

## 16) Intro to Templates:

We're going to start by porting over the app.py file from section 1, as we'll be expanding off of that work in this section.
We'll revisit the /theform route and currently, all we've been doing is returning html directly as a string.
Now this method works, but if we wanted to return a large amount of HTML, this wouldn't be very practical.
Now in flask we have what is called templates and there's a template engine called Jinja that runs these templates.
So to use these templates, we're going to first import render_template from flask.
Then we'll create a folder in our working directory called "templates", and this folder will house all our html templates
and it's also where flask knows to look for our templates.
Within this templates folder we'll create a plain HTML file called "form.html" and we'll then take the HTML from the return
statement in /theform and move it over to the HTML document.
Then instead of returning the html directly, we'll use render_template and return the form.html file.
    "render_template('form.html')"
So if we run the app now, we'll get the same result in the browser, but this is a different way of achieving said result.
If we want proof that it works, in the form.html file, above everythign else we'll add h1 tags and create a header that will reflect during runtime.
We'll also add some formatting just to make the html more valid and correct.

## 17) Template Variables:

Using templates goes much deeper than just allowing you to keep your html neatly in a separate location.
So we'll now look at how to use templates with variables inside of them.
So we'll start out by modifying the home route to return a template called "home.html" instead of the html line.
Naturally this means we need to create that file as well.
We'll also move over the return html code over to the template as well, but removing the placeholder as we can't use .format in html.
Now what we want to do is pass in a variable to the template, and to do that, you pass in extra arguments to render_template:
    "render_template('home.html', name=name)"
Now to use that variable inside the html template, we need to refer to it using "{{ }}"
    "{{ name }}"
So in Jinja the base of the code is HTML, and then whenever you want to have something dynamic (e.g. injecting some code)
you use some sort of brackets to specify that this is now code that needs to be executed.
Now in the case of what we put into the brackets, it's telling the interpreter that the variable 'name' needs to be replaced header
then it'll be readable in the HTML.
So running a test at first name will be default but if we feed it a name in the URL it'll pass that name through as it did previously.
In summary whenever you need to pass a variable to a template, you reference it in the html file with {{ }} and then in the 
route return that calls render_template, you pass the variable along there with the file name being rendered.

## 18) Conditionals:

So we've seen now that variables are one thing you can add in the template.
Another thing that can be added to templates are conditional statements, so "if" statements.
So in the home route render_template we'll pass in a boolean for the sake of demonstration.
    "render_template(..., display=True)"
Now we'll add an if statement into the home.html template, and to do that, we need to encompass the the if statement in {% %}
After that we can insert the code we'd want to run if the conditions are met, and then after that we include an {% endif %} to 
signify the end of the if statement code.
Note that the only python code in this is in the actual if statement line, not counting the endif, within the if sits html statements again.
This may be expanded upon later on however.
Now when we run the home route, because the if condition is true we'll see the h2 header we included as well in the if statement code.
We can also add an else into the statement by including an "{% else %}" line between the if and endif lines.
Note that Jinja is just placed around the html, most of the template should be HTML, and then when you need to add some logic, 
you use either the {{}} or {% %} to tell the interpreter that you are trying to add some kind of logic or variable to execute.

## 19) Loops:

